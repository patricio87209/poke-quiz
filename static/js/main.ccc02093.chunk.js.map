{"version":3,"sources":["components/Button.jsx","components/ButtonGroup.jsx","services/pokemons.js","lib/Quiz/states.js","lib/Quiz/actions.js","lib/Quiz/reducer.js","pages/Quiz.jsx","App.jsx","serviceWorker.js","index.js"],"names":["styled","button","div","axios","create","baseURL","getQuiz","options","getRandomInt","answer","length","generateQuiz","Promise","all","map","option","id","get","then","response","data","name","image","sprites","front_default","pokemons","max","Math","floor","random","stateTypes","createLoadingState","prevState","type","actionTypes","quizReducer","state","action","loadingReducer","playingReducer","endGameReducer","isCorrectAnswer","createLoseState","QuizLayout","main","QuizFigure","figure","QuizImage","img","attrs","style","filter","offuscated","undefined","QuizOptions","Quiz","useReducer","reducer","dispatch","onQuizLoaded","useCallback","onLoad","loadQuiz","useEffect","onAnswerSelected","selectedAnswer","target","onAnswer","setTimeout","recycle","friction","initialVelocityY","src","find","pokemon","alt","ButtonGroup","Button","key","onClick","disabled","App","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ccc02093.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport default styled.button`\n    padding: 1em;\n    border: 3px solid blueviolet;\n    border-radius: 4px;\n`","import styled from \"styled-components\";\n\nexport default styled.div`\n    display: grid;\n    grid-gap: 1em;\n`","import { create } from \"axios\";\n\nconst baseURL = \"https://pokeapi.co/api/v2\";\n\nconst axios = create({ baseURL });\nconst pokemonLimit = 100;\n\nexport function getQuiz() {\n  const { answer, options } = generateQuiz();\n  return Promise.all(\n    options.map(option => getPokemon(option))\n  ).then(pokemons => ({ answer, options: pokemons }));\n}\n\nfunction getPokemon(id) {\n  return axios\n    .get(`/pokemon/${id}`)\n    .then(response => response.data)\n    .then(({ id, name, sprites: { front_default } }) => ({\n      id,\n      name,\n      image: front_default\n    }));\n}\n\nfunction generateQuiz() {\n  const options = [\n    getRandomInt(pokemonLimit),\n    getRandomInt(pokemonLimit),\n    getRandomInt(pokemonLimit),\n    getRandomInt(pokemonLimit)\n  ];\n  const answer = options[getRandomInt(options.length)];\n\n  return { options, answer };\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n","export const stateTypes = {\n  loading: \"loading\",\n  playing: \"playing\",\n  win: \"win\",\n  lose: \"lose\"\n};\n\nexport function createPlayingState(answer, options) {\n  return {\n    type: stateTypes.playing,\n    answer,\n    options\n  };\n}\nexport function createWinState(prevState) {\n  return {\n    ...prevState,\n    type: stateTypes.win\n  };\n}\nexport function createLoseState(prevState) {\n  return {\n    ...prevState,\n    type: stateTypes.lose\n  };\n}\nexport function createLoadingState(prevState) {\n  return {\n    ...prevState,\n    type: stateTypes.loading\n  };\n}\n","export const actionTypes = {\n  onLoad: \"onLoad\",\n  onAnswer: \"onAnswer\",\n  onStart: \"onStart\"\n};\n\nexport function onLoad(answer, options) {\n  return {\n    type: actionTypes.onLoad,\n    answer,\n    options\n  };\n}\n\nexport function onAnswer(answer) {\n  return {\n    type: actionTypes.onAnswer,\n    answer\n  };\n}\n\nexport function onStart() {\n  return { type: actionTypes.onStart };\n}\n","import {\n  stateTypes,\n  createPlayingState,\n  createLoadingState,\n  createWinState,\n  createLoseState\n} from \"./states\";\nimport { actionTypes } from \"./actions\";\n\nexport default function quizReducer(\n  state = { type: stateTypes.loading },\n  action\n) {\n  switch (state.type) {\n    case stateTypes.loading:\n      return loadingReducer(state, action);\n    case stateTypes.playing:\n      return playingReducer(state, action);\n    case stateTypes.win:\n    case stateTypes.lose:\n      return endGameReducer(state, action);\n    default:\n      return state;\n  }\n}\n\nfunction loadingReducer(state, action) {\n  switch (action.type) {\n    case actionTypes.onLoad:\n      return createPlayingState(action.answer, action.options);\n    default:\n      return state;\n  }\n}\n\nfunction playingReducer(state, action) {\n  switch (action.type) {\n    case actionTypes.onAnswer:\n      return isCorrectAnswer(state, action)\n        ? createWinState(state)\n        : createLoseState(state);\n    default:\n      return state;\n  }\n}\n\nfunction endGameReducer(state, action) {\n  switch (action.type) {\n    case actionTypes.onStart:\n      return createLoadingState();\n    default:\n      return state;\n  }\n}\n\nfunction isCorrectAnswer(state, action) {\n  return +state.answer === +action.answer;\n}\n","import React, { useEffect, useReducer, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport Confetti from 'react-confetti'\n\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\n\nimport { getQuiz } from \"../services/pokemons\";\n\nimport reducer from \"../lib/Quiz/reducer\";\nimport { onLoad, onAnswer, onStart } from \"../lib/Quiz/actions\";\nimport { createLoadingState, stateTypes } from \"../lib/Quiz/states\";\n\nconst QuizLayout = styled.main`\n  padding: 1em;\n  max-width: 460px;\n  margin: auto;\n  display: grid;\n  grid-template-rows: 1fr 1fr;\n  height: 100%;\n  background: darkgreen;\n`;\n\nconst QuizFigure = styled.figure`\n  position: relative;\n`;\n\nconst QuizImage = styled.img.attrs(({ offuscated }) => ({\n  style: {\n    filter: offuscated ? \"contrast(0) saturate(0%) brightness(0%)\" : undefined\n  }\n}))`\n  position: absolute;\n  right: 50%;\n  top: 50%;\n  transform: translateY(-50%);\n  opacity: 1;\n`;\n\nconst QuizOptions = styled.div`\n  font-family: \"pokemon_solidnormal\";\n`;\n\nexport default function Quiz() {\n  const [{ type, answer, options }, dispatch] = useReducer(\n    reducer,\n    createLoadingState()\n  );\n\n  const onQuizLoaded = useCallback(\n    (answer, options) => dispatch(onLoad(answer, options)),\n    [dispatch]\n  );\n\n  const loadQuiz = useCallback(() => {\n    dispatch(onStart());\n    getQuiz().then(({ answer, options }) => onQuizLoaded(answer, options));\n  }, [onQuizLoaded]);\n\n  useEffect(loadQuiz, []);\n\n  const onAnswerSelected = useCallback(\n    ({ target: { id: selectedAnswer } }) => {\n      dispatch(onAnswer(selectedAnswer));\n      setTimeout(loadQuiz, 3000);\n    },\n    [dispatch, loadQuiz]\n  );\n\n  return (\n    <QuizLayout>\n      {type === stateTypes.win && <Confetti recycle={false} friction= {1.02} initialVelocityY={-10} />}\n      <QuizFigure>\n        {options && answer && (\n          <QuizImage\n            src={options.find(pokemon => pokemon.id === answer).image}\n            alt=\"answer\"\n            offuscated={type === stateTypes.playing}\n          />\n        )}\n      </QuizFigure>\n\n      <QuizOptions>\n        <ButtonGroup>\n          {options &&\n            options.map(({ id, name }) => (\n              <Button\n                key={id}\n                id={id}\n                onClick={onAnswerSelected}\n                disabled={type !== stateTypes.playing}\n              >\n                {name}\n              </Button>\n            ))}\n        </ButtonGroup>\n      </QuizOptions>\n    </QuizLayout>\n  );\n}\n\nQuiz.propTypes = {};\n\nQuiz.defaultProps = {};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { string, bool, func } from 'prop-types';\nimport Quiz from './pages/Quiz';\n\n\nexport default function App() {\n    return <Quiz/>\n}\n\nApp.propTypes = {\n\n};\n\nApp.defaultProps = {\n\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './wipe.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}